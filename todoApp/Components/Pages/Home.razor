@page "/"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using todoApp.Code
@using todoApp.Models

@attribute [Authorize(Policy = "AuthorizedPolicy")];
@inject CPRServices CprServices;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject HashingHandler _hashingHandler;
@inject SymetrisHandler _SymetrisHandler
@inject NavigationManager NavigationManager
@inject CPRServices CprServices

<AuthorizeView>
    <Authorized Context="authContext">
        <div class="row" style="justify-content: center;">
            <div class="col-md-4">
                <div>
                    <h1>Hello, @userName!</h1>
                    <hr />
                    <div style="padding: 20px 0px; width: 100%;">

                        <EditForm Model="@cprInputModel" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-group">
                                <label for="cpr">CPR Number:</label>
                                <input id="cpr" class="form-control" placeholder="Input CPR-Number" @bind="@cprNr" />
                            </div>
                            <br />
                            <div style="width: 100%; display: flex; justify-content: center;">
                                <button type="submit" class="btn btn-primary">@SubmitButtonText</button>
                            </div>
                        </EditForm>

                    </div>
                    @if (!string.IsNullOrWhiteSpace(message))
                    {
                        <div class="alert alert-success" style="position: fixed; bottom: 15px; right: 10px; z-index: 9999;">@message</div>
                    }
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <h1>You need access</h1>
    </NotAuthorized>
</AuthorizeView>

@code {
    private CPR userCpr;
    private string cprNr = "";
    private string message = "";
    private string userName ="";
    private string SubmitButtonText => userCpr != null ? "Check CPR" : "Add CPR";
    private CprInputModel cprInputModel = new CprInputModel();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userName = authState.User.Identity.Name;
        userCpr = await CprServices.GetUserCprAsync();
        if (userCpr != null)
        {
            cprNr = userCpr.CPRNr;
        }
        cprNr = "";

        // string hashingValue = _hashingHandler.HMACHashing("1111");
        // string hashingValue2 = _hashingHandler.HMACHashing("1111");
        // bool matched = hashingValue == hashingValue2;

        // // specific type of hash
        // string test = _hashingHandler.BCRYPT_Hashing("1111");
        // bool test2 = _hashingHandler.BCRYPT_HashingValidation("1111", test); // returns true;
        

        // string encrypt = _SymetrisHandler.Encrypt("is");
        // string dencrypt = _SymetrisHandler.Decrypt(encrypt);
    }

    // handle submit on CPR number
    private async Task HandleValidSubmit()
    {
        bool isCprValid = await CprServices.HandleCprSubmitAsync(cprNr);
        if (isCprValid)
        {
            // Navigate to the todo list page if CPR is correct or added
            NavigationManager.NavigateTo("/todolist");
        }
        else
        {
            message = "Incorrect CPR number.";
            StateHasChanged();
            await Task.Delay(2000);

            message = ""; // Clear the message
            StateHasChanged();
        }
    }
}
