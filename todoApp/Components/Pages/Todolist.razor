@page "/todolist"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using todoApp.Models
@using todoApp.Code

@attribute [Authorize(Policy = "AuthorizedPolicy")]
@inject CPRServices CPRServices
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ToDoListServices ToDoListServices
@inject AsymmetricHandler AsymetrisHandler

<AuthorizeView>
    <Authorized Context="authContext">
        <div class="row" style="justify-content: center;">
            <div class="col-md-6">
                <h3>Todo List</h3>
                <hr />
                <div>
                    <EditForm Model="@newTodoItem" OnValidSubmit="AddItem" class="mb-4">
                        <div class="form-group">
                            <!-- Ensure this binds to the newTodoItem.Item property -->
                            <InputText @bind-Value="newTodoItem.Item" class="form-control" placeholder="Enter new todo item" />
                        </div>
                        <div style="width: 100%; display: flex; justify-content: center; padding-top: 10px;">
                            <button type="submit" class="btn btn-primary">Add Item</button>
                        </div>
                    </EditForm>

                    @if (!string.IsNullOrEmpty(warningMessage))
                    {
                        <div class="alert alert-warning" role="alert">
                            @warningMessage
                        </div>
                    }

                    @if (userTodoItemsDto != null && userTodoItemsDto.Any())
                    {
                        <ul class="list-group">
                            @foreach (var item in userTodoItemsDto)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    @item.Item
                                    <button @onclick="() => DeleteItem(item.Id)" class="btn btn-danger btn-sm">Delete</button>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No to do items found.</p>
                    }
                </div>
            </div>
        </div>
    </Authorized>
</AuthorizeView>


@code {
    private List<TodoItemDto> userTodoItemsDto;
    private TodoItemInputModel newTodoItem = new TodoItemInputModel();
    private string warningMessage = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (!string.IsNullOrEmpty(userId))
        {
            // Fetch decrypted items for display
            userTodoItemsDto = await ToDoListServices.GetDecryptedTodoItemsByUserIdAsync(userId);
        }
    }

    private async Task AddItem()
    {
        warningMessage = "";
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (string.IsNullOrWhiteSpace(newTodoItem.Item))
        {
            warningMessage = "Please enter a todo item.";
            return;
        }

        if (!string.IsNullOrEmpty(userId))
        {
            // Prepare the item to submit using the DTO
            var itemToSubmitDto = new TodoItemDto
                {
                    UserId = userId,
                    Item = newTodoItem.Item
                };

            await ToDoListServices.AddTodoItemAsync(itemToSubmitDto);

            // Refresh the list with decrypted items for display
            userTodoItemsDto = await ToDoListServices.GetDecryptedTodoItemsByUserIdAsync(userId);

            // Clear the input model to prevent reuse
            newTodoItem = new TodoItemInputModel();
        }
    }

    private async Task DeleteItem(int itemId)
    {
        await ToDoListServices.DeleteTodoItemAsync(itemId);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (!string.IsNullOrEmpty(userId))
        {
            // Refresh the list with decrypted items to reflect changes
            userTodoItemsDto = await ToDoListServices.GetDecryptedTodoItemsByUserIdAsync(userId);
        }
    }
}