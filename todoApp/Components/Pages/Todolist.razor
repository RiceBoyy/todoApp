@page "/todolist"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using todoApp.Models
@using todoApp.Code

@attribute [Authorize(Policy = "AuthorizedPolicy")]
@inject CPRServices CPRServices
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ToDoListServices ToDoListServices

<AuthorizeView>
    <Authorized Context="authContext">
        <div class="row" style="justify-content: center;">
            <div class="col-md-6">
                <h3>Todo List</h3>
                <hr />
                <div>
                    <EditForm Model="@newTodoItem" OnValidSubmit="AddItem" class="mb-4">
                        <div class="form-group">
                            <InputText @bind-Value="newTodoItem.Item" class="form-control" placeholder="Enter new todo item" />
                        </div>
                        <div style="width: 100%; display: flex; justify-content: center; padding-top: 10px;">
                            <button type="submit" class="btn btn-primary">Add Item</button>
                        </div>
                    </EditForm>

                    @if (userTodoItems != null && userTodoItems.Any())
                    {
                        <ul class="list-group">
                            @foreach (var item in userTodoItems)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    @item.Item
                                    <button @onclick="() => DeleteItem(item.Id)" class="btn btn-danger btn-sm">Delete</button>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No to do items found.</p>
                    }
                </div>
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private List<TodoList> userTodoItems;
    private TodoList newTodoItem = new TodoList();
    private CPR userCpr;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        // Fetch the CPR entry for the current user to get the CPRNr
        var userCpr = await CPRServices.GetUserCprAsync(); 
        if (userCpr != null)
        {
            // Attempt to convert the CPRNr from string to int
            if (int.TryParse(userCpr.CPRNr, out int cprNr))
            {
                userTodoItems = await ToDoListServices.GetTodoItemsByCPRNrAsync(cprNr);
            }
        }
    }

    private async Task AddItem()
    {
        var userCpr = await CPRServices.GetUserCprAsync();
        if (userCpr != null)
        {
            if (int.TryParse(userCpr.CPRNr, out int cprNr))
            {
                newTodoItem.UserId = cprNr;
                await ToDoListServices.AddTodoItemAsync(newTodoItem);

                // Reset the form and refresh the list
                newTodoItem = new TodoList();
                userTodoItems = await ToDoListServices.GetTodoItemsByCPRNrAsync(cprNr);
            }

        }
    }

    private async Task DeleteItem(int itemId)
    {
        var userCpr = await CPRServices.GetUserCprAsync();
        if (userCpr != null)
        {
            if (int.TryParse(userCpr.CPRNr, out int cprNr))
            {
                await ToDoListServices.DeleteTodoItemAsync(itemId);
                userTodoItems = await ToDoListServices.GetTodoItemsByCPRNrAsync(cprNr);
            }
        }
        
        
    }

}
