@page "/AdminDashboard"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.EntityFrameworkCore;
@using System.Security.Claims;
@using todoApp.Code
@using todoApp.Models;

@attribute [Authorize(Roles = "Admin")]
@inject CPRServices CprServices;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject ToDoListServices ToDoListServices
@inject IJSRuntime JSRuntime
@inject IServiceProvider ServiceProvider
@inject AuthenticationService AuthenticationService
@inject NavigationManager NavigationManager;
@inject Roles RoleService

<AuthorizeView Roles="Admin">
    <Authorized Context="authContext">
        <div class="row" style="justify-content: center;">
            <div class="col-md-6">
                <h1>Admin CPR Dashboard</h1>
                <hr />
                <div>
                    <!-- Find User -->
                    <div style="padding: 20px 0px; width: 100%;">
                        <EditForm Model="@cprInputModel" OnValidSubmit="FilterCprsByEmail">
                            <div class="form-group" style="padding-bottom: 10px;">
                                <label for="filterEmail">Filter by Email:</label>
                                <input id="filterEmail" class="form-control" placeholder="Enter Email to filter" @bind="emailFilter" /> <!-- Updated id and bind variable -->
                            </div>

                            <div style="width: 100%; display: flex; justify-content: center;">
                                <button type="submit" class="btn btn-info">Filter CPR</button>
                            </div>
                        </EditForm>
                    </div>

                    <!-- Update User -->
                    <div style="padding: 20px 0px; width: 100%;">
                        <EditForm Model="@cprInputModel" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-group">
                                <label for="email">User Email:</label>
                                <input id="email" class="form-control" placeholder="Enter user email" @bind="userEmail" />
                            </div>

                            <div class="form-group">
                                <label for="cpr">CPR Number:</label>
                                <input id="cprAdmin" class="form-control" placeholder="Input CPR-Number" @bind="cprNr" />
                            </div>
                            <br />

                            <div style="width: 100%; display: flex; justify-content: center;">
                                <button type="submit" class="btn btn-primary">@SubmitButtonText</button>
                            </div>
                        </EditForm>
                    </div>
                </div>

                <!-- Message from the system to the user -->
                @if (!string.IsNullOrWhiteSpace(message))
                {
                    <div class="@($"alert {messageClass}")" style="position: fixed; bottom: 10px; left: 10px; z-index: 9999;">@message</div>
                }

            </div>
            <hr />

            <!-- lists display -->
            <div>
                <h2>All CPR Records</h2>
                <!-- Button to trigger deletion of all todo items -->
                <div class="mt-4">
                    <button class="btn btn-danger" @onclick="DeleteAllTodoItems">Delete All Todo Items</button>
                    <button class="btn btn-danger" @onclick="DeleteAllNormalUsers">Delete All Normal Users</button>
                    <button class="btn btn-danger" @onclick="DeleteAllUsers">Delete All Users</button>
                </div>
                @if (allCprs != null && allCprs.Count > 0)
                {
                    <table class="table">
                        <thead>
                            <tr>
                                <th>User ID</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var cpr in allCprs)
                            {
                                <tr>
                                    <td>@cpr.User</td>
                                    <td>
                                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteCpr(cpr)">Delete CPR</button>
                                        <button class="btn btn-warning btn-sm" @onclick="() => DeleteAllTodosForUser(cpr.User)">Delete All Todos</button>
                                        <button class="btn btn-success btn-sm" @onclick="() => PromoteToAdmin(cpr.User)">Make Admin</button>
                                        <button class="btn btn-secondary btn-sm" @onclick="() => DemoteFromAdmin(cpr.User)">Demote from Admin</button>
                                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteUserAsync(cpr.User)">Delete User</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>

                }
                else
                {
                    <p>No CPR records found.</p>
                }
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private CPR userCpr;
    private List<CPR> allCprs = new();

    private string cprNr;
    private string userEmail;
    private string emailFilter;
    private string message;

    private string SubmitButtonText => userCpr != null ? "Update CPR" : "Add CPR";
    private CprInputModel cprInputModel = new CprInputModel();

    private string messageClass = "alert-success";


    protected override async Task OnInitializedAsync()
    {
        allCprs = await CprServices.GetAllCprsAsync();
    }

    // ADMIN is allowed to change the cpr of the user
    // this is only for testing reasons but not actually a part of the project
    private async Task HandleValidSubmit()
    {
        if (!string.IsNullOrWhiteSpace(userEmail))
        {
            // POST OR UPDATE CPR by EMAIL
            message = await CprServices.HandleCprOnEmailSubmitAsync(userEmail, cprNr);
            StateHasChanged();

            await Task.Delay(2000); // Wait for 2 seconds

            message = ""; // Clear the message
            StateHasChanged();
        }
        else
        {
            message = "Please enter a valid email address.";
        }
    }

    // ADMIN this is only to test and see some functionality,
    // this should not be seen as a part of the project.
    private async Task DeleteCpr(CPR cpr)
    {
        if (cpr != null)
        {
            var result = await CprServices.DeleteCprAsync(cpr);
            if (result)
            {
                message = "CPR record deleted successfully.";
                allCprs = await CprServices.GetAllCprsAsync(); // Refresh the list
            }
            else
            {
                message = "Error deleting CPR record.";
            }
            StateHasChanged();
        }
    }

    // ------------------------------------------------------------ ALLOWED FUNCTIONS
    // ADMIN is allowed to check if the user has an cpr number.
    private async Task FilterCprsByEmail()
    {
        if (!string.IsNullOrWhiteSpace(emailFilter))
        {
            var user = await CprServices.GetUserCprByEmailAsync(emailFilter);
            if (user == null)
            {
                message = $"No CPR records found for the email: {emailFilter}.";
                messageClass = "alert-warning";
                allCprs.Clear();
            }
            else
            {
                allCprs = new List<CPR> { user };
                message = "";
            }
        }
        else
        {
            allCprs = await CprServices.GetAllCprsAsync();
            message = "";
        }

        StateHasChanged();
    }

    // ADMIN SHOULD BE ABLE TO DELETE ALL ITEMS ON TODO LIST
    private async Task DeleteAllTodoItems()
    {
        // Confirm the action
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete ALL todo items for ALL users? This action cannot be undone.");
        if (confirmed)
        {
            await ToDoListServices.DeleteAllTodoItemsAsync();
            message = "All todo items have been successfully deleted.";
            messageClass = "alert-danger";
            StateHasChanged();
        }
    }

    // ADMIN SHOULD BE ABLE TO DELETE ALL ITEMS FOR ONE USER
    private async Task DeleteAllTodosForUser(string userId)
    {
        if (!string.IsNullOrEmpty(userId))
        {
            await ToDoListServices.DeleteAllTodoItemsByUserIdAsync(userId);
            message = "All todo items for the user have been deleted.";
            messageClass = "alert-success";
        }
        else
        {
            message = "Invalid user ID provided.";
            messageClass = "alert-warning";
        }

        StateHasChanged(); // Update UI to reflect the changes
    }

    private async Task PromoteToAdmin(string userId)
    {
        try
        {
            await RoleService.CreateUserRole(userId, "Admin", ServiceProvider);
            message = "User has been promoted to admin.";
            messageClass = "alert-success";
        }
        catch (Exception ex)
        {
            message = $"Error promoting user to admin: {ex.Message}";
            messageClass = "alert-danger";
        }

        StateHasChanged(); // Refresh UI to show the message
    }

    private async Task DemoteFromAdmin(string userId)
    {
        try
        {
            await RoleService.RemoveUserRole(userId, "Admin", ServiceProvider);
            message = "User has been demoted from admin.";
            messageClass = "alert-success";
        }
        catch (Exception ex)
        {
            message = $"Error demoting user from admin: {ex.Message}";
            messageClass = "alert-danger";
        }

        StateHasChanged(); // Refresh UI to show the message
    }
    
    private async Task DeleteUserAsync(string userId)
    {
        if (!string.IsNullOrEmpty(userId))
        {
            var result = await AuthenticationService.DeleteUserByIdAsync(userId); // Correctly call the method
            if (result.Succeeded) // Check the Succeeded property
            {
                message = "User deleted successfully.";
                messageClass = "alert-success";
            }
            else
            {
                // Join the error descriptions if any (optional, but often useful)
                var errors = string.Join(", ", result.Errors.Select(e => e.Description));
                message = "Error deleting user: " + errors;
                messageClass = "alert-danger";
            }
            allCprs = await CprServices.GetAllCprsAsync(); // Refresh the list to remove the deleted user's CPR record
        }
        else
        {
            message = "Invalid user ID provided.";
            messageClass = "alert-warning";
        }
        StateHasChanged();
    }

    private async Task DeleteAllNormalUsers()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete all normal users? This action cannot be undone.");
        if (!confirmed)
        {
            return;
        }

        var result = await AuthenticationService.DeleteAllNormalUsers();
        if (result.Succeeded)
        {
            message = "All normal users have been successfully deleted.";
            messageClass = "alert-success";
            allCprs = await CprServices.GetAllCprsAsync();
        }
        else
        {
            var errors = string.Join(", ", result.Errors.Select(e => e.Description));
            message = $"Failed to delete all normal users: {errors}";
            messageClass = "alert-danger";
        }

        StateHasChanged();
    }

    private async Task DeleteAllUsers()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete ALL users? This action cannot be undone.");
        if (confirmed)
        {
            var result = await AuthenticationService.DeleteAllUsersAsync();
            if (result.Succeeded)
            {
                message = "All users have been successfully deleted.";
                messageClass = "alert-success";
                StateHasChanged();

                NavigationManager.NavigateTo("/");
            }
            else
            {
                message = "An error occurred while deleting users.";
                messageClass = "alert-danger";
                StateHasChanged();
            }
        }
    }
}

