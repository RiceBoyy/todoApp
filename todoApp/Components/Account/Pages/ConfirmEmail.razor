@page "/Account/ConfirmEmail"

@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Text.Encodings.Web
@using SkiaSharp
@using SkiaSharp.QrCode
@using SkiaSharp.QrCode.Image

@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject UrlEncoder UrlEncoder
@inject IdentityRedirectManager RedirectManager
@inject ILogger<EnableAuthenticator> Logger

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using System.Reflection.Emit
@using static System.Runtime.CompilerServices.RuntimeHelpers
@using todoApp.Components.Account.Pages.Manage
@using todoApp.Data
@using Code

@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject AuthenticationService AuthenticationService

<PageTitle>Confirm email</PageTitle>
<StatusMessage Message="@statusMessage" />
<div class="row" style="justify-content: center;">
    <div class="col-md-6">
        <h1 style="width: 100%; text-align:center;">Confirm email</h1>
        <hr />
        <div style="width: 100%; display: flex; justify-content: center; padding-top: 10px; align-items: center;">
            <h3>Please download/install Google Authenticator for 2face Auth</h3>
            <div class="list-group-item d-flex justify-content-between align-items-center">
                <img src="@_qrImageSource" />
            </div>
        </div>
    </div>
</div>

@code {
    private const string AuthenticatorUriFormat = "otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6";
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    private string _qrImageSource;


    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Code is null)
        {
            RedirectManager.RedirectTo("");
            return;
        }

        var user = await UserManager.FindByIdAsync(UserId);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = $"Error loading user with ID {UserId}.";
            return;
        }

        var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
        var result = await UserManager.ConfirmEmailAsync(user, code);
        if (result.Succeeded)
        {
            statusMessage = "Thank you for confirming your email.";
            await LoadSharedKeyAndQrCodeUriAsync(user);

            // After confirming email, check for admin existence and potentially promote the user
            await AuthenticationService.EnsureAdminUserAsync();
        }
        else
        {
            statusMessage = "Error confirming your email.";
        }
    }

    private async ValueTask LoadSharedKeyAndQrCodeUriAsync(ApplicationUser user)
    {
        var unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        if (string.IsNullOrEmpty(unformattedKey))
        {
            await UserManager.ResetAuthenticatorKeyAsync(user);
            unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        }

        string sharedKey = FormatKey(unformattedKey!);

        var email = await UserManager.GetEmailAsync(user);
        string authenticatorUri = GenerateQrCodeUri(email!, unformattedKey!);
        generateQRImage(authenticatorUri);
    }

    private string FormatKey(string unformattedKey)
    {
        var result = new StringBuilder();
        int currentPosition = 0;
        while (currentPosition + 4 < unformattedKey.Length)
        {
            result.Append(unformattedKey.AsSpan(currentPosition, 4)).Append(' ');
            currentPosition += 4;
        }
        if (currentPosition < unformattedKey.Length)
        {
            result.Append(unformattedKey.AsSpan(currentPosition));
        }

        return result.ToString().ToLowerInvariant();
    }

    private string GenerateQrCodeUri(string email, string unformattedKey)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            AuthenticatorUriFormat,
            UrlEncoder.Encode("Microsoft.AspNetCore.Identity.UI"),
            UrlEncoder.Encode(email),
            unformattedKey);
    }

    private void generateQRImage(string authenticatorUri)
    {
        using var generator = new QRCodeGenerator();
        // Generate QrCode
        var qr = generator.CreateQrCode(authenticatorUri, ECCLevel.L);

        var info = new SKImageInfo(300, 300);
        using var surface = SKSurface.Create(info);
        var canvas = surface.Canvas;
        canvas.Render(qr, info.Width, info.Height);

        // Output to Stream -> File
        using var image = surface.Snapshot();
        using var data = image.Encode(SKEncodedImageFormat.Png, 100);
        Stream stream = data.AsStream();

        using MemoryStream ms = new MemoryStream();
        byte[] buffer = new byte[4096];
        int bytesRead;

        while ((bytesRead = stream.Read(buffer, 0, buffer.Length)) > 0)
        {
            ms.Write(buffer, 0, bytesRead);
        }

        ms.Seek(0, SeekOrigin.Begin);

        // Convert the MemoryStream to a Base64 string
        string base64 = Convert.ToBase64String(ms.ToArray());
        _qrImageSource = "data:image/png;base64," + base64;
    }

}
